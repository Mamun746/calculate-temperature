{"version":3,"sources":["components/TempInput.js","components/TempResult.js","components/CalculateTemp.js","App.js","index.js"],"names":["scaleName","c","f","TempInput","onChange","e","props","onHandleChange","target","value","scale","this","temperature","style","fontSize","color","className","Component","TempResult","padding","celsius","toCelsius","fahrenheit","toFahrenheit","tryConvert","convert","inputTemp","parseFloat","Number","isNaN","outputTemp","Math","round","toString","CalculateTemp","state","onCelsiusTempChange","setState","onFahrenheitTempChange","App","ReactDOM","render","document","getElementById"],"mappings":"yMAEMA,EAAU,CACZC,EAAE,UACFC,EAAE,cAqBSC,E,2MAhBXC,SAAS,SAACC,GACN,EAAKC,MAAMC,eAAeF,EAAEG,OAAOC,Q,wEAInC,IAAMC,EAAMC,KAAKL,MAAMI,MACjBE,EAAYD,KAAKL,MAAMM,YAC7B,OACI,6BACI,2BAAOC,MAAO,CAACC,SAAS,OAAOC,MAAM,UAArC,wBAAqEf,EAAUU,IAC/E,2BAAOM,UAAU,eAAeP,MAAOG,EAAaR,SAAUO,KAAKP,gB,GAZ3Da,aCGTC,EARI,SAACZ,GAChB,OACI,yBAAKO,MAAO,CAACM,QAAQ,OAAOL,SAAS,SAChCR,EAAMc,SAAS,IAAI,oEAAoC,yECDpE,SAASC,EAAUC,GACf,OAAyB,GAAjBA,EAAW,IAAU,EAEjC,SAASC,EAAaH,GAClB,OAAkB,EAAVA,EAAa,EAAG,GAG5B,SAASI,EAAWZ,EAAYa,GAC5B,IAAMC,EAAUC,WAAWf,GAC3B,GAAGgB,OAAOC,MAAMH,GACZ,MAAO,GAEX,IAAMI,EAAWL,EAAQC,GAEzB,OADcK,KAAKC,MAAmB,IAAbF,GAAqB,KAC/BG,W,IAuCJC,E,2MAlCXC,MAAM,CACFvB,YAAY,GACZF,MAAM,I,EAEV0B,oBAAoB,SAACxB,GACjB,EAAKyB,SAAS,CACV3B,MAAM,IACNE,iB,EAIR0B,uBAAuB,SAAC1B,GAEpB,EAAKyB,SAAS,CACV3B,MAAM,IACNE,iB,wEAIJ,IAAMA,EAAYD,KAAKwB,MAAMvB,YACvBF,EAAMC,KAAKwB,MAAMzB,MACjBU,EAAgB,MAARV,EAAYc,EAAWZ,EAAYS,GAAWT,EACtDU,EAAmB,MAARZ,EAAYc,EAAWZ,EAAYW,GAAcX,EAClE,OACI,6BACE,kBAAC,EAAD,CAAWF,MAAM,IAAIE,YAAaQ,EAASb,eAAgBI,KAAKyB,sBAChE,kBAAC,EAAD,CAAW1B,MAAM,IAAIE,YAAaU,EAAYf,eAAgBI,KAAK2B,yBAEnE,kBAAC,EAAD,CAAYlB,QAASA,S,GA9BPH,aCPbsB,MAVf,WACE,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,aACf,kBAAC,EAAD,SCFNwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bcf2dc34.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst scaleName={\n    c:\"Celsius\",\n    f:'Fahrenheit'\n}\n\nclass TempInput extends Component {\n\n    onChange=(e)=>{\n        this.props.onHandleChange(e.target.value)\n    }\n   \n    render() {\n        const scale=this.props.scale\n        const temperature=this.props.temperature\n        return (\n            <div>\n                <label style={{fontSize:'20px',color:'green'}}>Inter Temperature in {scaleName[scale]}</label>\n                <input className=\"form-control\" value={temperature} onChange={this.onChange} />\n            </div>\n        );\n    }\n}\n\nexport default TempInput;","import React from 'react';\n\nconst TempResult = (props) => {\n    return (\n        <div style={{padding:'10px',fontSize:'40px'}}>\n            {props.celsius>=100?<h4>The Water is boiling....ðŸ˜¢</h4>:<h4>The Water is boiling yet...ðŸ˜„</h4>}\n        </div>\n    );\n};\n\nexport default TempResult;","import React, { Component } from 'react';\nimport TempInput from './TempInput'\nimport TempResult from './TempResult'\n\nfunction toCelsius(fahrenheit){\n    return (fahrenheit-32) * 5 / 9\n}\nfunction toFahrenheit(celsius){\n    return (celsius * 9/ 5)+32\n}\n\nfunction tryConvert(temperature,convert){\n    const inputTemp=parseFloat(temperature)\n    if(Number.isNaN(inputTemp)){\n        return ''\n    }\n    const outputTemp=convert(inputTemp)\n    const rounded=Math.round(outputTemp * 1000) / 1000\n    return rounded.toString()\n}\n\nclass CalculateTemp extends Component {\n\n    state={\n        temperature:'',\n        scale:''\n    }\n    onCelsiusTempChange=(temperature)=>{\n        this.setState({\n            scale:'c',\n            temperature\n        })\n    }\n\n    onFahrenheitTempChange=(temperature\n        )=>{\n        this.setState({\n            scale:'f',\n            temperature\n        })\n    }\n    render() { \n        const temperature=this.state.temperature;\n        const scale=this.state.scale\n        const celsius=scale==='f'?tryConvert(temperature,toCelsius):temperature\n        const fahrenheit=scale==='c'?tryConvert(temperature,toFahrenheit):temperature\n        return (\n            <div>\n              <TempInput scale='c' temperature={celsius} onHandleChange={this.onCelsiusTempChange}/>  \n              <TempInput scale='f' temperature={fahrenheit} onHandleChange={this.onFahrenheitTempChange}/> \n              \n              <TempResult celsius={celsius}/>\n            </div>\n        );\n    }\n}\n\nexport default CalculateTemp;","import React from 'react';\nimport CalculateTemp from './components/CalculateTemp'\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"card-body\">\n      <CalculateTemp/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}